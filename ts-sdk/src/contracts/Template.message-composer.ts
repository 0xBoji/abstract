/**
* This file was automatically generated by @abstract-money/ts-codegen@0.28.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { AppExecuteMsg, AppExecuteMsgFactory } from "@abstract-money/abstract.js";
import { AdminResponse, Addr, ConfigResponse, ExecuteMsg, BaseExecuteMsg, TemplateExecuteMsg, StdAck, Binary, Uint128, IbcResponseMsg, Cw20ReceiveMsg, InstantiateMsg, BaseInstantiateMsg, TemplateInstantiateMsg, TemplateMigrateMsg, MigrateMsg, BaseMigrateMsg, QueryMsg, BaseQueryMsg, TemplateQueryMsg } from "./Template.types";
export interface TemplateMessage {
  contractAddress: string;
  sender: string;
  base: (baseExecuteMsg: BaseExecuteMsg, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  module: (templateExecuteMsg: TemplateExecuteMsg, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  ibcCallback: ({
    id,
    msg
  }: {
    id: string;
    msg: StdAck;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class TemplateMessageComposer implements TemplateMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.base = this.base.bind(this);
    this.module = this.module.bind(this);
    this.ibcCallback = this.ibcCallback.bind(this);
    this.receive = this.receive.bind(this);
  }

  base = (baseExecuteMsg: BaseExecuteMsg, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      base: {}
    };
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds
      })
    };
  };
  module = (templateExecuteMsg: TemplateExecuteMsg, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      module: {}
    };
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds
      })
    };
  };
  ibcCallback = ({
    id,
    msg
  }: {
    id: string;
    msg: StdAck;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      ibc_callback: {
        id,
        msg
      }
    };
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds
      })
    };
  };
  receive = ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      receive: {
        amount,
        msg,
        sender
      }
    };
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds
      })
    };
  };
}